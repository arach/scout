searchState.loadedDescShard("sled", 0, "<code>sled</code> is a high-performance embedded database with an API …\nA batch of updates that will be applied atomically to the …\nThe underlying collection no longer exists.\nCompare and swap error.\nTop-level configuration for the system.\nCorruption has been detected in the storage file.\nThe <code>sled</code> embedded database! Implements …\nContains the error value\nAn Error type encapsulating various issues that may come up\nAn event that happened to a key that a subscriber is …\nIn this mode, the database will try to maximize write …\nA buffer that may either be inline or remote and protected …\nA new complete (key, value) pair\nA read or write error has happened when interacting with …\nAn iterator over keys and values in a <code>Tree</code>.\nIn this mode, the database will make decisions that favor …\nA function that may be configured on a particular shared …\nThe high-level database mode, according to the trade-offs …\nContains the success value\nA deleted key\nAn unexpected bug has happened. Please open an issue on …\nThe top-level result type for dealing with fallible …\nA subscriber listening on a specified prefix\nA flash-sympathetic persistent lock-free B+ tree.\nThe system has been used in an unsupported way.\nCreate a new batched update that can be atomically applied.\nmaximum size in bytes for the system page cache\nReturns the CRC32 of all keys and values in this Db.\nReturns the CRC32 of all keys and values in this Tree.\nClears the <code>Tree</code>, removing all values.\nCompare and swap. Capable of unique creation, conditional …\nthe compression factor to use with zstd compression. …\nReturns <code>true</code> if the <code>Tree</code> contains a value for the …\nattempts to exclusively open the database, failing if it …\nThe current value which caused your CAS to fail.\nRemove a disk-backed collection.\nA database export method for all collections in the <code>Db</code>, …\nFetch the value, apply a function to it and return the …\nReturns the first key and value in the <code>Tree</code>, or <code>None</code> if …\nSynchronously flushes all dirty IO buffers and calls …\nAsynchronously flushes all dirty IO buffers and calls …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a monotonic ID. Not guaranteed to be contiguous. …\nRetrieve a value from the <code>Tree</code> if it exists.\nRetrieve the next key and value from the <code>Tree</code> after the …\nRetrieve the key and value before the provided key, if one …\nImports the collections from a previous database.\nSet a key to a new value\nInsert a key to a new value, returning the last value if it\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Tree</code> contains no elements.\nCreate a double-ended iterator over the tuples of keys and …\nReturn the key associated with the <code>Event</code>\nIterate over the keys of this Tree\nReturns the last key and value in the <code>Tree</code>, or <code>None</code> if the …\nReturns the number of elements in this tree.\nMerge state directly into a given key’s value using the …\nspecify whether the system should run in “small” or “…\nReturns the name of the tree.\nReturns a default <code>Config</code>\nAttempts to wait for a value on this <code>Subscriber</code>, returning …\nOpens a <code>Db</code> with a default configuration at the specified …\nOpens a <code>Db</code> based on the provided config.\nOpen or create a new disk-backed Tree with its own …\nSet the path of the database (builder).\nAtomically removes the maximum item in the <code>Tree</code> instance.\nAtomically removes the minimum item in the <code>Tree</code> instance.\nprint a performance profile when the Config is dropped\nReturned value that was proposed unsuccessfully.\nCreate a double-ended iterator over tuples of keys and …\nRemove a key\nDelete a value, returning the old value if it existed.\nCreate an iterator over tuples of keys and values, where …\nSets a merge operator for use with the <code>merge</code> function.\nReturns the on-disk size of the storage files for this …\nCreate a subslice of this <code>IVec</code> that shares the same …\ndeletes the database after drop. if no path is set, uses …\nFully serializable (ACID) multi-<code>Tree</code> transactions\nPerform a multi-key serializable transaction.\nReturns the trees names saved in this Db.\nFetch the value, apply a function to it and return the …\nwhether to use zstd compression\nIterate over the values of this Tree\nReturns <code>true</code> if the database was recovered from a previous …\nSubscribe to <code>Event</code>s that happen to keys that have the …\nThe file location that corrupted data was found at.\nA backtrace for where the corruption was encountered.\nThe key that has been set\nThe key that has been removed\nThe value that has been set\nA user-provided error type that indicates the transaction …\nA user-provided error type that indicates the transaction …\nAn internal conflict has occurred and the <code>transaction</code> …\nAn error type that is returned from the closure passed to …\nA transaction-related <code>Result</code> which is used for …\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nA serious underlying storage issue has occurred that …\nA serious underlying storage issue has occurred that …\nA serious underlying storage issue has occurred that …\nAn error type that is returned from the closure passed to …\nA transaction-related <code>Result</code> which is used for returning …\nA type that may be transacted on in sled transactions.\nA transaction that will be applied atomically to the Tree.\nA type which allows for pluggable transactional …\nAn error type that is returned from the closure passed to …\nAn internal reference to an internal proxy type that …\nA simple constructor for <code>Err(TransactionError::Abort(_))</code>\nAtomically apply multiple inserts and removals.\nFlush the database before returning from the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a monotonic ID. Not guaranteed to be contiguous …\nGet the value associated with a key\nSet a key to a new value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn internal function for creating a top-level …\nRemove a key\nRuns a transaction, possibly retrying the passed-in …\nAn internal function for viewing the transactional …")