#!/bin/bash
# Scout Transcriber Service Manager

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SERVICE_NAME="scout-transcriber"
BINARY_PATH="./target/release/scout-transcriber"
PID_FILE="/tmp/scout-transcriber.pid"
LOG_FILE="/tmp/scout-transcriber.log"

# Function to check if service is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        PID=$(cat "$PID_FILE")
        if ps -p "$PID" > /dev/null 2>&1; then
            return 0
        else
            # PID file exists but process is dead
            rm -f "$PID_FILE"
        fi
    fi
    return 1
}

# Function to start the service
start_service() {
    if is_running; then
        echo -e "${YELLOW}‚ö†Ô∏è  Service is already running (PID: $(cat $PID_FILE))${NC}"
        return 1
    fi
    
    echo -e "${GREEN}Starting Scout Transcriber...${NC}"
    
    # Start in background, redirect output to log file
    nohup "$BINARY_PATH" "$@" > "$LOG_FILE" 2>&1 &
    PID=$!
    echo $PID > "$PID_FILE"
    
    # Wait a moment to check if it started successfully
    sleep 1
    
    if is_running; then
        echo -e "${GREEN}‚úÖ Service started successfully (PID: $PID)${NC}"
        echo -e "${BLUE}üìù Logs: tail -f $LOG_FILE${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Failed to start service${NC}"
        echo -e "${YELLOW}Check logs: cat $LOG_FILE${NC}"
        return 1
    fi
}

# Function to stop the service
stop_service() {
    if ! is_running; then
        echo -e "${YELLOW}‚ö†Ô∏è  Service is not running${NC}"
        return 1
    fi
    
    PID=$(cat "$PID_FILE")
    echo -e "${YELLOW}Stopping Scout Transcriber (PID: $PID)...${NC}"
    
    # Try graceful shutdown first
    kill "$PID" 2>/dev/null || true
    
    # Wait up to 5 seconds for graceful shutdown
    for i in {1..5}; do
        if ! is_running; then
            echo -e "${GREEN}‚úÖ Service stopped gracefully${NC}"
            rm -f "$PID_FILE"
            return 0
        fi
        sleep 1
    done
    
    # Force kill if still running
    echo -e "${YELLOW}Force stopping...${NC}"
    kill -9 "$PID" 2>/dev/null || true
    pkill -9 -f "$SERVICE_NAME" 2>/dev/null || true
    rm -f "$PID_FILE"
    
    echo -e "${GREEN}‚úÖ Service stopped${NC}"
    return 0
}

# Function to restart the service
restart_service() {
    echo -e "${BLUE}Restarting Scout Transcriber...${NC}"
    stop_service
    sleep 1
    shift  # Remove 'restart' from arguments
    start_service "$@"
}

# Function to show service status
show_status() {
    if is_running; then
        PID=$(cat "$PID_FILE")
        echo -e "${GREEN}‚óè Scout Transcriber is running${NC}"
        echo -e "  PID: $PID"
        echo -e "  Uptime: $(ps -o etime= -p $PID 2>/dev/null | xargs)"
        echo -e "  Memory: $(ps -o rss= -p $PID 2>/dev/null | awk '{print int($1/1024) "MB"}' || echo "N/A")"
        
        # Show queue stats if available
        if [ -d "/tmp/scout-transcriber" ]; then
            INPUT_COUNT=$(ls -1 /tmp/scout-transcriber/input 2>/dev/null | wc -l | xargs)
            OUTPUT_COUNT=$(ls -1 /tmp/scout-transcriber/output 2>/dev/null | wc -l | xargs)
            echo -e "  Queues: input=$INPUT_COUNT, output=$OUTPUT_COUNT"
        fi
    else
        echo -e "${RED}‚óè Scout Transcriber is not running${NC}"
    fi
}

# Function to show logs
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        if [ "$1" = "-f" ] || [ "$1" = "--follow" ]; then
            echo -e "${BLUE}Following logs (Ctrl+C to exit)...${NC}"
            tail -f "$LOG_FILE"
        else
            echo -e "${BLUE}Recent logs:${NC}"
            tail -n 50 "$LOG_FILE"
            echo ""
            echo -e "${YELLOW}Tip: Use 'logs -f' to follow logs${NC}"
        fi
    else
        echo -e "${YELLOW}No log file found${NC}"
    fi
}

# Function to build the service
build_service() {
    echo -e "${BLUE}Building Scout Transcriber...${NC}"
    cargo build --release
    echo -e "${GREEN}‚úÖ Build complete${NC}"
}

# Function to show help
show_help() {
    echo "Scout Transcriber Service Manager"
    echo ""
    echo "Usage: ./transcriber <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start [args]   Start the service (args passed to binary)"
    echo "  stop           Stop the service"
    echo "  restart [args] Restart the service"
    echo "  status         Show service status"
    echo "  logs [-f]      Show logs (-f to follow)"
    echo "  build          Build the service"
    echo "  help           Show this help message"
    echo ""
    echo "Examples:"
    echo "  ./transcriber start                    # Start with defaults"
    echo "  ./transcriber start --workers 4        # Start with 4 workers"
    echo "  ./transcriber start --log-level debug  # Start with debug logging"
    echo "  ./transcriber logs -f                  # Follow logs"
    echo "  ./transcriber status                   # Check if running"
    echo "  ./transcriber restart --workers 8      # Restart with 8 workers"
}

# Main command handling
case "$1" in
    start)
        shift
        start_service "$@"
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service "$@"
        ;;
    status)
        show_status
        ;;
    logs)
        shift
        show_logs "$@"
        ;;
    build)
        build_service
        ;;
    help|--help|-h)
        show_help
        ;;
    "")
        show_status
        echo ""
        echo "Use './transcriber help' for usage information"
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo "Use './transcriber help' for usage information"
        exit 1
        ;;
esac